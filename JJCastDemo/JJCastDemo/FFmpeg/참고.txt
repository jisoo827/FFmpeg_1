****************************************적용*************************************************
화면녹화
[최신]ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -draw_mouse 1 -offset_x 159 -offset_y 173 -s hd720 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p "base.mp4" -f dshow -i audio="마이크(2- USB Microphone)"
웹캠녹화
ffmpeg -y -f dshow -i video="ABKO APC930 QHD WEBCAM" -rtbufsize 100M -framerate 45 -video_size 298x144  -c:v libx264 -r 45 -preset ultrafast -tune zerolatency -crf 28 -pix_fmt yuv420p -c:a aac -strict -2 -ac 2 -b:a 128k "cam.mp4"
캠화면 축소
ffmpeg -y -i greenscreensample.mp4 -vf scale=480:300 greenscreensample_480.mp4
크로마키 & 오버레이
ffmpeg -y -i base.mp4 -i cam_35m_320.mp4 -filter_complex "[1:v]setpts = PTS - 0.1 / TB[a];[a]chromakey=0x57ff27 : 0.1 : 0.1 [ckout];[0:v][ckout]overlay = (W - w):(H - h):enable = gte(t\, 0):eof_action = pass,format = yuv420p[out]" -map "[out]" -map 0:a? -c:v libx264 -preset ultrafast -tune zerolatency -crf 18 -c:a copy  chromakey_output.mp4
컨버트 & 이어붙이기
ffmpeg -y -i chromakey_output.mp4 -c copy -bsf:v h264_mp4toannexb -f mpegts back.ts &&  ffmpeg -y -i title_01_minecraft.mp4 -c copy -bsf:v h264_mp4toannexb -f mpegts front.ts && ffmpeg -y -i "concat:front.ts|back.ts" -c copy -bsf:a aac_adtstoasc result.mp4

FFFDFF
크로마키 & 오버레이
ffmpeg -y -i base_35m.mp4 -i greenscreensample_480.mp4 -filter_complex "[1:v]setpts = PTS - 0.1 / TB[a];[a]chromakey=0x56cd53 : 0.1 : 0.1 [ckout];[0:v][ckout]overlay = (W - w):(H - h):enable = gte(t\, 0):eof_action = pass,format = yuv420p[out]" -map "[out]" -map 0:a? -c:v libx264 -preset ultrafast -tune zerolatency -crf 18 -c:a copy chromakey_output_3.mp4
ffmpeg -y -i base_35m.mp4 -i tomyyouth480.mp4 -filter_complex "[1:v]setpts = PTS - 0.1 / TB[a];[a]chromakey=0xae1816 : 0.1 : 0.1 [ckout];[0:v][ckout]overlay = (W - w):(H - h):enable = gte(t\, 0):eof_action = pass,format = yuv420p[out]" -map "[out]" -map 0:a? -c:v libx264 -preset ultrafast -tune zerolatency -crf 18 -c:a copy chromakey_output_2.mp4
ffmpeg -y -i base_35m.mp4 -i cam_35m_320.mp4 -filter_complex "[1:v]setpts = PTS - 0.1 / TB[a];[0:v][a]overlay = (W - w):(H - h):enable = gte(t\, 0):eof_action = pass,format = yuv420p[out]" -map "[out]" -map 0:a? -c:v libx264 -crf 18 -c:a copy  overlay_output_35m.mp4

컨버트 & 이어붙이기
ffmpeg -y -i chromakey_output.mp4 -c copy -bsf:v h264_mp4toannexb -f mpegts back.ts &&  ffmpeg -y -i title_01_minecraft.mp4 -c copy -bsf:v h264_mp4toannexb -f mpegts front.ts && ffmpeg -y -i "concat:front.ts|back.ts" -c copy -bsf:a aac_adtstoasc result.mp4
﻿*******************************************************
ffmpeg -y ⓐ -i ⓑ -acodec ⓒ -ab ⓓ -ar ⓔ -ac ⓕ -b:a ⓖ -vcodec ⓗ -level ⓘ -b:v ⓙ
-r ⓚ -s ⓛ -threads ⓜ -strict experimental ⓝ ⓞ

ⓐ -y : 출력파일을 쓸 때 같은 이름의 파일이 있어도 확인없이 덮어쓰기를 하겠다는 의미.
ⓑ -i <입력파일이름> : 변환할 원본 동영상 파일 이름을 지정.
ⓒ -acodec <오디오코덱> : 오디오 코덱을 지정한다. 여기서는 aac 로 함.
ⓓ -ab <숫자> : 오디오 비트레이트를 지정한다.
ⓔ -ar <숫자> : 오디오 샘플링 레이트를 지정한다.
ⓕ -ac <숫자> : 오디오 채널을 지정한다.
ⓖ -b:a <숫자> : 오디오 비트레이트를 지정한다.
ⓗ -vcodec <비디오코덱> : 비디오 코덱을 지정한다. 여기서는 libx264 로 함. (H.264 코덱)
ⓘ -level <숫자> : Baseline 값. 30이면, Baseline 3.0
ⓙ -b:v <숫자> : 비디오 비트레이트를 지정한다.
ⓚ -r <숫자> : 출력 동영상 프레임 레이트를 지정한다.
ⓛ -s <숫자> : 화면 크기, 해상도를 지정한다. 원본 해상도보다 크게 할 경우 확대되서 나온다.
프리셋처럼 미리 지정된 문자가 있어서 직접 해상도를 지정하지 않아도 된다.
ex) vga – 640 x 480, sxga 1280 x 1024, wvga 852 x 480, hd720 – 1280 x 720 등
ⓜ -threads <숫자> : 쓰레드수를 지정한다. 속도 향상을 위해 멀티쓰레드를 지정해줄 수 있다.
반드시 CPU 코어 갯수와 일치시킬 필요는 없지만, 보통은 코어 갯수에
맞춘다.
ⓝ -strict experimental : 옵션의 엄격함을 느슨하게 풀어주는 옵션
ⓞ <출력파일이름> : 변환하여 저장할 동영상 파일 이름을 지정한다.

동영상 변환 옵션 예)

ffmpeg -y -i 변환전동영상파일명.avi -acodec aac -ab 192k -ar 48000 -ac 2 -b:a 300k  -vcodec libx264 -level 30 -b:v 3000k -r 29.97 -s 1280:720 -threads 4 -strict -2 변환후동영상파일명.mp4


출처: https://peche326.tistory.com/58 [복슝아]
출처: https://peche326.tistory.com/58
*******************************************************
디바이스 목록 찾기
ffmpeg -list_devices true -f dshow -i dummy

화면녹화
ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -probesize 10M -draw_mouse 1 -i title="Jcobs - Chrome" -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p "output2.avi"
ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -probesize 10M -draw_mouse 1 -offset_x 180 -offset_y 200 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p "output.mp4"
ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -probesize 10M -draw_mouse 1 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p "output.mp4"
ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -probesize 10M -draw_mouse 1 -offset_x 180 -offset_y 200 -video_size 720x404 -show_region 1 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p output11.mp4
ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -s -offset_x 10 -offset_y 20 -i -show_region 1 -i desktop "output2.avi"
ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -probesize 10M -draw_mouse 1 -offset_x 180 -offset_y 200 -video_size 298x144 -show_region 1 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p "output_ovelay.mp4"
ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -draw_mouse 1 -offset_x 341 -offset_y 355 -video_size 720x404 -show_region 1 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p -f dshow -i audio="헤드셋 마이크(Corsair VOID Wireless Gaming Dongle)" "output03.mp4"
ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -draw_mouse 1 -offset_x 341 -offset_y 355 -s hd720 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p  "output03.mp4" -f dshow -i audio="마이크(2- USB Microphone)"
ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -draw_mouse 1 -offset_x 159 -offset_y 173 -s hd720 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p "output03.mp4" -f dshow -i audio="마이크(2- USB Microphone)"
[최신]ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -draw_mouse 1 -offset_x 159 -offset_y 173 -s hd720 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p "base.mp4" -f dshow -i audio="마이크(2- USB Microphone)"

웹캠녹화
ffmpeg -y -f dshow -i video="ABKO APC930 QHD WEBCAM" -rtbufsize 100M -framerate 45 -video_size 298x144  -c:v libx264 -r 45 -preset ultrafast -tune zerolatency -crf 28 -pix_fmt yuv420p -c:a aac -strict -2 -ac 2 -b:a 128k "cam.mp4"
밑에 웹캠 녹화 다 안됨......
** webcam video 녹화.
ffmpeg -f dshow -i video="Logitech HD Webcam C510" out.mp4

 ** webcam video , audio(마이크) 녹화.
ffmpeg -f dshow -i video="ABKO APC930 QHD WEBCAM" -f dshow -i audio="마이크(2- USB Microphone)" -r 30 out2.mp4

** 전체화면 녹화 , webcam 마이크 소리 녹화
ffmpeg -f dshow -i video="screen-capture-recorder" -f dshow -i audio="마이크(2- USB Microphone)" -r 30 out3.mp4

** 전체화면 녹화 , 컴퓨터 사운드 녹화
ffmpeg -f dshow -i video="screen-capture-recorder" -f dshow -i audio="virtual-audio-capturer" -r 30 out4.mp4

- 전체화면 저장
ffmpeg -f gdigrab -framerate 6 -i desktop out6.mp4

- 시작점 (10,20) 부터 시작하여 vga 크기 (640x480) 만큼만 녹화하기.
ffmpeg -f gdigrab -framerate 6 -offset_x 10 -offset_y 20 -video_size vga -i desktop out7.mp4

- 시작점 (100,200) 부터 시작하여 svga 크기 (800x600) 만큼만 녹화하기.
ffmpeg -f gdigrab -framerate 6 -offset_x 100 -offset_y 200 -video_size svga -i desktop out8.mp4

- 윈도우 title 이  "Calculator" 인 화면만 녹화하기.
ffmpeg -f gdigrab -framerate 6 -i title=Calculator out9.mp4

- 시작점 (100,200) 부터 시작하여 svga 크기 (800x600) 만큼만 녹화  + "마이크(HD Webcam C510)"  이용한 audio 녹화
ffmpeg -f gdigrab -framerate 6 -offset_x 10 -offset_y 20 -video_size svga -i desktop -f dshow -i audio="마이크(2- USB Microphone)" out10.mp4

- 시작점 (100,200) 부터 시작하여 svga 크기 (800x600) 만큼만 녹화  + 컴퓨터 사운드 녹화
ffmpeg -f gdigrab -framerate 6 -offset_x 100 -offset_y 200 -video_size svga -i desktop -f dshow -i audio="virtual-audio-capturer" out11.mp4

- 시작점 (100,200) 부터 시작하여 720x405 (youtube) 크기 만큼만 녹화  + 컴퓨터 사운드 녹화
ffmpeg -f gdigrab -framerate 6 -offset_x 100 -offset_y 200 -video_size 720x405 -i desktop -f dshow -i audio="마이크(2- USB Microphone)" output1.mp4

------ffmpeg -i output1.avi -sameq -vcodec mpeg4 output1.mp4

동영상 컨버트
ffmpeg -i AllOfMe.mp4 -acodec aac -vcodec libx264 -strict -2 AllOfMe2.mp4
ffmpeg -i title_01_minecraft.mp4 -acodec aac -vcodec libx264 -strict -2 title_01_minecraft2.mp4
ffmpeg -i output_merge2.avi -strict -2 output_merge2.mp4
동영상 컨버트 & 병합
ffmpeg -y -i chromakey_output.mp4 -c copy -bsf:v h264_mp4toannexb -f mpegts back.ts &&  ffmpeg -y -i title_01_minecraft.mp4 -c copy -bsf:v h264_mp4toannexb -f mpegts front.ts && ffmpeg -y -i "concat:front.ts|back.ts" -c copy -bsf:a aac_adtstoasc output_concat.mp4
ffmpeg -i title_01_minecraft.mp4 -c copy -bsf:v h264_mp4toannexb -f mpegts front.ts
ffmpeg -y -i "concat:front.ts|back.ts" -c copy -bsf:a aac_adtstoasc output_concat.mp4

동영상 병합
ffmpeg -i output2.avi -c copy -bsf:v h264_mp4toannexb -f mpegts temp1.ts && -i output.avi -c copy -bsf:v h264_mp4toannexb -f mpegts temp2.ts && -i "concat:temp1.ts|temp2.ts" -c copy -bsf:a aac_adtstoasc output_merge.avi
ffmpeg -i output2.avi -c copy -bsf:v h264_mp4toannexb -f mpegts temp1.ts &&  -i output.avi -c copy -bsf:v h264_mp4toannexb -f mpegts temp2.ts  &&  -i "concat:temp1.ts|temp2.ts" -c copy -bsf:a aac_adtstoasc output_merge.avi
ffmpeg -i output2.avi -c copy -bsf:v h264_mp4toannexb -f mpegts temp1.ts &&  -i output.avi -c copy -bsf:v h264_mp4toannexb -f mpegts temp2.ts  &&  -i "concat:temp1.ts|temp2.ts" -c copy -bsf:a aac_adtstoasc output_merge.avi

ffmpeg -y -i title_01_10초_minecraft.mp4 -acodec aac -vcodec libx264 -s hd720  -r 60 -qscale 0.1 -strict experimental front.mp4 && ffmpeg -y -i output03_201028214922.mp4 -acodec aac -vcodec libx264 -s hd720  -r 60 -qscale 0.1 -strict experimental back.mp4 &&  ffmpeg -y -f concat -i mergeVideo.txt -c copy output_merge.mp4


ffmpeg -i output2.avi -c copy -bsf:v mpeg4_unpack_bframes temp1.ts 
ffmpeg  -i output.avi -c copy -bsf:v h264_mp4toannexb temp2.ts 
ffmpeg  -i "concat:temp1.ts|temp2.ts" -c copy -bsf:a h264_mp4toannexb output_merge.avi

ffmpeg -f concat -i mergeVideo.txt -c copy output_merge4.avi
ffmpeg -f concat -i mergeVideo.txt -c copy output_merge.mp4

동영상 오버레이
ffmpeg -i input.mp4 -i overlay.mp4 -filter_complex "[1:v]setpts=PTS+1/TB[a];[0:v][a]overlay=(W-w):(H-h):enable=gte(t\,1):eof_action=pass,format=yuv420p[out]" -map "[out]" -map 0:a? -c:v libx264 -crf 18 -c:a copy output_overlay2.mp4
ffmpeg -y -i KakaoTalk_20201028_171304281.mp4 -i 캠영상_test_1분.mp4 -filter:v scale=720:-1 -filter_complex "[1:v]setpts=PTS+1/TB[a];[0:v][a]overlay=(W-w):(H-h):enable=gte(t\,1):eof_action=pass,format=yuv420p[out]" -map "[out]" -map 0:a? -c:v libx264 -crf 18 -c:a copy output_overlay3.mp4
ffmpeg -y -i KakaoTalk_20201028_171304281.mp4 -i 캠영상_test_1분_width240.mp4 -filter_complex "[1:v]setpts=PTS+1/TB[a];[0:v][a]overlay=(W-w):(H-h):enable=gte(t\,1):eof_action=pass,format=yuv420p[out]" -map "[out]" -map 0:a? -c:v libx264 -crf 18 -c:a copy output_overlay2.mp4
//이거안됨 - ffmpeg -i input.mp4 -i overlay.mp4 -filter_complex "[1:v]setpts=PTS-10/TB[a]; [0:v][a]overlay=enable=gte(t\,0):shortest=1[out]" -map [0] -map 120:a -c:v libx264 -crf 18 -pix_fmt yuv420p -c:a copy output_overlay.mp4
ffmpeg -i input.mov -i overlay.mov \
-filter_complex "[1:v]setpts=PTS-10/TB[a]; \
                 [0:v][a]overlay=enable=gte(t\,5):shortest=1[out]" \
-map [out] -map 0:a \
-c:v libx264 -crf 18 -pix_fmt yuv420p \
-c:a copy \
output.mov
 __> 오버레이 시작하고 싶은시간 : overlay=enable=gte(t\,5) : 5초에 오버레이 하겠다
 __> [1:v]setpts=PTS+0/TB[a] .. 

크로마키
ffmpeg -y -i chromakey.mp4 -vf scale=320:240 chromakey_320.mp4
ffmpeg -y -i base.mp4 -i chromakey_320.mp4 -filter_complex "[1:v]setpts = PTS + 0 / TB[a];[0:v][a]overlay = (W - w):(H - h):enable = gte(t\, 0):eof_action = pass,format = yuv420p[out]" -map "[out]" -map 0:a? -c:v libx264 -crf 18 -c:a copy output_overlay.mp4
ffmpeg -i <base-video> -i <overlay-video> -filter_complex '[1:v]colorkey=0x<color>:<similarity>:<blend>[ckout];[0:v][ckout]overlay[out]' -map '[out]' <output-file>
ffmpeg -y -i base.mp4 -i chromakey_320.mp4 -filter_complex "[1:v]setpts = PTS - 0.1 / TB[a];[1:v]colorkey = 0x57ff27 : 0.1 : 0.2;[0:v][a]overlay = (W - w):(H - h):enable = gte(t\, 0):eof_action = pass,format = yuv420p[out]" -map "[out]" -map 0:a? -c:v libx264 -crf 18 -c:a copy output_overlay2.mp4
similarity - 키 색상과의 유사성 비율 .. 1.0은 모든 것과 일치하는 반면 정확한 키 색상 만 일치
blend : 픽셀을 완전히 투명하게 만들거나 전혀 투명하게 만듬 , 값이 높을수록 반투명 픽셀이 생성, 투명도가 높을수록 픽셀 색상이 키 색상과 유사
!!!!!! _> ffmpeg -y -i base.mp4 -i chromakey_320.mp4 -filter_complex "[1:v]setpts = PTS - 0.1 / TB[a];[a]chromakey=0x57ff27 : 0.1 : 0.1 [ckout];[0:v][ckout]overlay = (W - w):(H - h):enable = gte(t\, 0):eof_action = pass,format = yuv420p[out]" -map "[out]" -map 0:a? -c:v libx264 -crf 18 -c:a copy  chromakey_output.mp4

*****************************************************************************************

-- 화면 녹화 (음성 없이)
ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -probesize 10M -draw_mouse 1 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p "D:\output.mp4"

-- 마이크 장치 출력하기
ffmpeg -list_devices true -f dshow -i dummy

-- 화면 녹화 (음성 녹음과 함께)
ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -probesize 10M -draw_mouse 1 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p "output.mp4" -f dshow -i audio="마이크(Synaptics SmartAudio HD)"
ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -probesize 10M -draw_mouse 1 -offset_x 0 -offset_y 0 -video_size 720x405 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p "output.mp4" -f dshow -i audio="헤드셋 마이크(Corsair VOID Wireless Gaming Dongle)"


-- 웹캠을 파일로 녹화하는 동시에 녹화중인 내용에 대한 비디오 미리 보여주기
ffmpeg -f dshow -rtbufsize 100M -s 1280x720 -vcodec h264 -i video="HD Pro Webcam C920":audio="마이크(Synaptics SmartAudio HD)" "d:\test.mp4" -f mjpeg - | ffplay
ffmpeg -f dshow -rtbufsize 100M -s 1280x720 -vcodec h264 -i video="LG Camera":audio="마이크(Synaptics SmartAudio HD)" "d:\test.mp4" -f mjpeg - | ffplay

ffmpeg -y -rtbufsize 100M -f gdigrab -framerate 30 -probesize 10M -draw_mouse 1 -i desktop -c:v libx264 -r 30 -preset ultrafast -tune zerolatency -crf 25 -pix_fmt yuv420p "d:\output.mp4"